1. –ö–∞–∫ –æ—Ç–ª–∏—á–∏—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –æ—Ç –Ω–µ—Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π –≤ Stream API?
–¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ‚Äì —ç—Ç–æ –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫—Ä—ã–≤–∞—é—Ç —Å—Ç—Ä–∏–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, collect(), forEach(), count()). –ü–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∏–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.

–ù–µ—Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–µ (–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ) –æ–ø–µ—Ä–∞—Ü–∏–∏ ‚Äì —ç—Ç–æ –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∞—é—Ç —Å—Ç—Ä–∏–º, –∞ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –Ω–æ–≤—ã–π —Å—Ç—Ä–∏–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, map(), filter(), sorted()). –û–Ω–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ª–µ–Ω–∏–≤–æ –∏ –Ω–µ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ –≤—ã–∑–æ–≤–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.

–ü—Ä–∏–º–µ—Ä —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã—Ö –∏ –Ω–µ—Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
java
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
import java.util.List;
import java.util.stream.Collectors;

public class StreamExample {
    public static void main(String[] args) {
        List<String> names = List.of("Alice", "Bob", "Charlie", "David");

        List<String> result = names.stream()
            .filter(name -> name.length() > 3)  // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è (–ª–µ–Ω–∏–≤–∞—è)
            .map(String::toUpperCase)           // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è (–ª–µ–Ω–∏–≤–∞—è)
            .sorted()                            // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è (–ª–µ–Ω–∏–≤–∞—è)
            .collect(Collectors.toList());      // –¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω–∞—è (–∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å—Ç—Ä–∏–º)

        System.out.println(result); // –í—ã–≤–æ–¥: [ALICE, CHARLIE, DAVID]
    }
}
–ö–∞–∫ –æ—Ç–ª–∏—á–∏—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é?
–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ Stream, –∞ List, Set, int, boolean –∏–ª–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ (void).
–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å—Ç—Ä–∏–º (–ø–æ—Å–ª–µ –Ω–µ—ë –Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ü–µ–ø–æ—á–∫—É).
–ü—Ä–∏–≤–æ–¥–∏—Ç –∫ –≤—ã—á–∏—Å–ª–µ–Ω–∏—é –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
–ö–∞–∫ –æ—Ç–ª–∏—á–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é?
–í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π Stream.
–ù–µ –≤—ã–∑—ã–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö —Å—Ä–∞–∑—É (–ª–µ–Ω–∏–≤–∞—è).
–ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ü–µ–ø–æ—á–∫—É –≤—ã–∑–æ–≤–æ–≤.
–¢–∞–±–ª–∏—Ü–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
–¢–∏–ø	–ú–µ—Ç–æ–¥—ã	–û–ø–∏—Å–∞–Ω–∏–µ
–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ (–ª–µ–Ω–∏–≤—ã–µ)	map(), filter(), sorted(), distinct(), peek()	–ù–µ –≤—ã–∑—ã–≤–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç Stream
–¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–µ (–∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ)	collect(), count(), forEach(), reduce(), anyMatch(), findFirst()	–ó–∞–ø—É—Å–∫–∞—é—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∏–º–∞ –∏ –∑–∞–∫—Ä—ã–≤–∞—é—Ç –µ–≥–æ
2. –ß—Ç–æ —Ç–∞–∫–æ–µ –ª–µ–Ω–∏–≤–∞—è (lazy) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è?
–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (lazy initialization) ‚Äì —ç—Ç–æ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –¥–æ –º–æ–º–µ–Ω—Ç–∞, –∫–æ–≥–¥–∞ –æ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–µ–Ω.

–ì–¥–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è?
Stream API ‚Äì –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.
Singleton (–ª–µ–Ω–∏–≤—ã–π) ‚Äì –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏.
–ö–æ–ª–ª–µ–∫—Ü–∏–∏ (Lazy Loading) ‚Äì –Ω–∞–ø—Ä–∏–º–µ—Ä, Hibernate –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
–ü—Ä–∏–º–µ—Ä: –õ–µ–Ω–∏–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ Stream API
java
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
import java.util.List;

public class LazyStreamExample {
    public static void main(String[] args) {
        List<String> names = List.of("Alice", "Bob", "Charlie", "David");

        names.stream()
            .filter(name -> {
                System.out.println("–§–∏–ª—å—Ç—Ä: " + name);
                return name.length() > 3;
            })  // –ù–ï –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É
            .map(name -> {
                System.out.println("–ú–∞–ø–ø–∏–Ω–≥: " + name);
                return name.toUpperCase();
            })  // –ù–ï –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É
            .sorted()  // –ù–ï –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É
            .forEach(System.out::println); // –¢–æ–ª—å–∫–æ –∑–¥–µ—Å—å —Å—Ç—Ä–∏–º –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è
    }
}
–í—ã–≤–æ–¥ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–µ–Ω—å –≤ –¥–µ–π—Å—Ç–≤–∏–∏)
makefile
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
–§–∏–ª—å—Ç—Ä: Alice
–§–∏–ª—å—Ç—Ä: Bob
–§–∏–ª—å—Ç—Ä: Charlie
–§–∏–ª—å—Ç—Ä: David
–ú–∞–ø–ø–∏–Ω–≥: Alice
–ú–∞–ø–ø–∏–Ω–≥: Charlie
–ú–∞–ø–ø–∏–Ω–≥: David
ALICE
CHARLIE
DAVID
üîπ –í–∞–∂–Ω–æ: filter() –∏ map() –≤—ã–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω—É–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∞ –Ω–µ –¥–ª—è –≤—Å–µ—Ö.

–ü—Ä–∏–º–µ—Ä: –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Singleton
java
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
class Singleton {
    private static Singleton instance;

    private Singleton() {} // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä

    public static Singleton getInstance() {
        if (instance == null) {  // –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            instance = new Singleton();
        }
        return instance;
    }
}
üîπ –û–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ getInstance(), –∞ –Ω–µ –∑–∞—Ä–∞–Ω–µ–µ.

–í—ã–≤–æ–¥
–¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å—Ç—Ä–∏–º –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ–π —Ü–µ–ø–æ—á–∫–∏.
–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ª–µ–Ω–∏–≤—ã–µ ‚Äì –æ–Ω–∏ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—é—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ –≤—ã–∑–æ–≤–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.
–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –¥–æ –º–æ–º–µ–Ω—Ç–∞, –∫–æ–≥–¥–∞ –æ–Ω–∏ —Ä–µ–∞–ª—å–Ω–æ –Ω—É–∂–Ω—ã.